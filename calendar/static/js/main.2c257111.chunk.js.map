{"version":3,"sources":["calendar/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Calendar","dateNow","Date","useState","month","getMonth","year","getFullYear","date","setDate","monthYear","getMonthInfo","useMemo","order","name","genetive","daysPerMounth","monthMinus","useCallback","monthPlus","getDay","day","className","onClick","days","res","week","dayOfTheWeek","currentDay","dayFromCurrentMonthStarted","prevMonth","monthStarted","prevMonthDayCount","dayOfPrevMounth","push","map","el","getDate","calendarGrid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c257111.chunk.js","sourcesContent":["import { ReactNode, useCallback, useMemo, useState } from \"react\";\nimport \"./styles.css\";\n\nconst Calendar = () => {\n  type monthInfoType = {\n    order: number;\n    name: string;\n    genetive: string;\n    daysPerMounth: (year?: number) => number;\n  };\n\n  type monthAndYearType = {\n    month: number;\n    year: number;\n  };\n  const dateNow = new Date();\n  const [date, setDate] = useState<monthAndYearType>({\n    month: dateNow.getMonth(),\n    year: dateNow.getFullYear(),\n  });\n\n  const monthYear = new Date(date.year, date.month);\n\n  const getMonthInfo = useMemo(\n    () => (order: number): monthInfoType => {\n      switch (order) {\n        case 0:\n          return {\n            order: 0,\n            name: \"Январь\",\n            genetive: \"Января\",\n            daysPerMounth: () => 31,\n          };\n        case 1:\n          return {\n            order: 1,\n            name: \"Февраль\",\n            genetive: \"Февраля\",\n            daysPerMounth: (year) => (year! % 4 === 0 ? 29 : 28),\n          };\n        case 2:\n          return {\n            order: 2,\n            name: \"Март\",\n            genetive: \"Марта\",\n            daysPerMounth: () => 31,\n          };\n        case 3:\n          return {\n            order: 3,\n            name: \"Апрель\",\n            genetive: \"Апреля\",\n            daysPerMounth: () => 30,\n          };\n        case 4:\n          return {\n            order: 4,\n            name: \"Май\",\n            genetive: \"Мая\",\n            daysPerMounth: () => 31,\n          };\n        case 5:\n          return {\n            order: 5,\n            name: \"Июнь\",\n            genetive: \"Июня\",\n            daysPerMounth: () => 30,\n          };\n        case 6:\n          return {\n            order: 6,\n            name: \"Июль\",\n            genetive: \"Июля\",\n            daysPerMounth: () => 31,\n          };\n        case 7:\n          return {\n            order: 7,\n            name: \"Август\",\n            genetive: \"Августа\",\n            daysPerMounth: () => 31,\n          };\n        case 8:\n          return {\n            order: 8,\n            name: \"Сентябрь\",\n            genetive: \"Сентября\",\n            daysPerMounth: () => 30,\n          };\n        case 9:\n          return {\n            order: 9,\n            name: \"Октябрь\",\n            genetive: \"Октября\",\n            daysPerMounth: () => 31,\n          };\n        case 10:\n          return {\n            order: 10,\n            name: \"Ноябрь\",\n            genetive: \"Ноября\",\n            daysPerMounth: () => 30,\n          };\n        case 11:\n          return {\n            order: 11,\n            name: \"Декабрь\",\n            genetive: \"Декабря\",\n            daysPerMounth: () => 31,\n          };\n        default:\n          return {\n            order: 0,\n            name: \"Январь\",\n            genetive: \"Января\",\n            daysPerMounth: () => 31,\n          };\n      }\n    },\n    [date]\n  );\n\n  const monthMinus = useCallback(() => {\n    setDate({\n      month:\n        getMonthInfo(date.month).order - 1 < 0\n          ? 11\n          : getMonthInfo(date.month).order - 1,\n      year: getMonthInfo(date.month).order - 1 < 0 ? date.year - 1 : date.year,\n    });\n  }, [date]);\n\n  const monthPlus = useCallback(() => {\n    setDate({\n      month:\n        getMonthInfo(date.month).order + 1 > 11\n          ? 0\n          : getMonthInfo(date.month).order + 1,\n      year: getMonthInfo(date.month).order + 1 > 11 ? date.year + 1 : date.year,\n    });\n  }, [date]);\n\n  const getDay = useCallback(\n    (date: Date): number => {\n      let day = date.getDay();\n      if (day == 0) day = 7;\n      return day - 1;\n    },\n    [date]\n  );\n  const calendarGrid = (days: number): ReactNode => {\n    const res: Array<number[]> = [];\n    let week: number[] = [];\n    let dayOfTheWeek = 0;\n\n    let currentDay = 1;\n    const dayFromCurrentMonthStarted = getDay(monthYear);\n    const prevMonth =\n      getMonthInfo(date.month).order - 1 < 0\n        ? 11\n        : getMonthInfo(date.month).order - 1;\n    let monthStarted = getDay(monthYear) > 0 ? false : true;\n\n    const prevMonthDayCount = getMonthInfo(prevMonth).daysPerMounth();\n    let dayOfPrevMounth =\n      dayFromCurrentMonthStarted > 0\n        ? prevMonthDayCount - dayFromCurrentMonthStarted\n        : 0;\n\n    while (days > -1) {\n      if (dayOfTheWeek < 7) {\n        if (days === 0) {\n          res.push([...week]);\n        }\n        if (monthStarted) {\n          dayOfTheWeek++;\n          days--;\n          week.push(currentDay);\n          currentDay++;\n        } else {\n          if (dayOfPrevMounth < prevMonthDayCount) {\n            dayOfTheWeek++;\n            week.push(dayOfPrevMounth);\n            dayOfPrevMounth++;\n          } else {\n            monthStarted = true;\n          }\n        }\n      } else {\n        res.push([...week]);\n        week = [];\n        dayOfTheWeek = 0;\n      }\n    }\n\n    return (\n      <>\n        {res.map((week) => (\n          <tr>\n            {week.map((el) => {\n              if (\n                dateNow.getMonth() === date.month &&\n                dateNow.getFullYear() === date.year &&\n                el === dateNow.getDate()\n              ) {\n                return (\n                  <td>\n                    <span className=\"today\">{el}</span>\n                  </td>\n                );\n              } else {\n                return <td>{el}</td>;\n              }\n            })}\n          </tr>\n        ))}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"calendarWrapper\">\n      <div className=\"dateSwitcher\">\n        <div onClick={monthMinus}>\n          <button>-</button>\n        </div>\n        <div>\n          <pre>\n            {getMonthInfo(date.month).name} {date.year}\n          </pre>\n        </div>\n        <div>\n          <button onClick={monthPlus}>+</button>\n        </div>\n      </div>\n      <table>\n        <tr>\n          <th>пн</th>\n          <th>вт</th>\n          <th>ср</th>\n          <th>чт</th>\n          <th>пт</th>\n          <th>сб</th>\n          <th>вс</th>\n        </tr>\n        {calendarGrid(getMonthInfo(date.month).daysPerMounth(date.year))}\n      </table>\n    </div>\n  );\n};\n\nexport default Calendar;\n","import \"./App.css\";\nimport Calendar from \"./calendar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}