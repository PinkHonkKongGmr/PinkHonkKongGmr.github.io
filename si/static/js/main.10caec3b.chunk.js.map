{"version":3,"sources":["components/unit/index.js","components/unit/unit.js","components/header/index.js","components/header/header.js","units/paradigmas/oop/index.js","units/paradigmas/oop/oop.js","units/paradigmas/functional/index.js","units/paradigmas/functional/functional.js","App.js","serviceWorker.js","index.js"],"names":["Unit","props","slide","condtition","state","toShowlist","setState","listClass","this","onClick","title","className","to","React","PureComponent","Header","OOP","Functional","App","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UACeA,E,kDCGZ,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAOVC,MAAQ,WACP,IAAIC,GAAa,EAAKC,MAAMC,WAC5B,EAAKC,SAAS,CAACD,WAAYF,KARxB,EAAKC,MAAM,CACPC,YAAW,GAHD,E,qDAchB,IAAIE,EAAYC,KAAKJ,MAAMC,WAAa,OAAQ,OAChD,OAAU,6BACC,wBAAII,QAASD,KAAKN,OAAQM,KAAKP,MAAMS,OACpC,wBAAIC,UAAaJ,GACd,kBAAC,IAAD,CAAMK,GAAG,QAAT,uBAEJ,wBAAID,UAAaJ,GACb,kBAAC,IAAD,CAAMK,GAAG,SAAT,qJ,GAtBDC,IAAMC,eCFVC,ECKA,WACb,OAEA,yBAAKJ,UAAU,UACX,sFAGA,wBAAIA,UAAU,IACX,kBAAC,EAAD,CAAMD,MAAQ,8DCbRM,ECCH,kBAAM,6BACd,+ECFWC,ECCI,kBAAM,6BACrB,yE,MCkBWC,MAdf,WACE,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBAAKP,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOQ,KAAK,OAAOC,OAAQ,kBAAI,kBAAC,EAAD,SAC/B,kBAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAI,kBAAC,EAAD,aCF5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.10caec3b.chunk.js","sourcesContent":["import Unit from './unit'\r\nexport default Unit","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Unit extends React.PureComponent  {\r\n   constructor(props){\r\n       super(props)\r\n       this.state={\r\n           toShowlist:false\r\n       }\r\n   }\r\n\r\n\r\n   slide = () =>{\r\n    let condtition = this.state.toShowlist ? false : true\r\n    this.setState({toShowlist: condtition})\r\n   }\r\n\r\n   render(){\r\n     let listClass = this.state.toShowlist ? 'show' :'hide'\r\n     return    <div>\r\n                <h2 onClick={this.slide}>{this.props.title}</h2>\r\n                 <li className = {listClass}>\r\n                    <Link to='/oop'>ООП</Link>\r\n                </li>\r\n                <li className = {listClass}>\r\n                    <Link to='/func'>Функциональная парадигма</Link>\r\n                </li>\r\n            </div>\r\n        }\r\n   }\r\n\r\n\r\n\r\nexport default Unit","import Header from './header'\r\nexport default Header","import React from 'react';\r\nimport './header.css'\r\nimport Unit from '../unit'\r\n\r\n\r\n\r\nconst Header = () => {\r\n  return ( \r\n\r\n  <div className=\"header\">\r\n      <h1>\r\n          Навигация\r\n      </h1>\r\n      <ul className=\"\">\r\n         <Unit title = 'Парадигмы'/>\r\n      </ul>\r\n  </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Header;","import OOP from './oop'\r\nexport default OOP","import React from 'react'\r\n\r\nconst OOP = () => <div>\r\n    <h1>Итак, ооп!</h1>\r\n</div>\r\n\r\nexport default OOP","import Functional from './functional'\r\nexport default Functional","import React from 'react'\r\n\r\nconst Functional = () => <div>\r\n    <h1>Итак, ФП!</h1>\r\n</div>\r\n\r\nexport default Functional","import React from 'react';\nimport './App.css';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport Header from './components/header';\nimport OOP from './units/paradigmas/oop';\nimport Functional from './units/paradigmas/functional';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n            <div className='mx-3'>\n                <Header/>\n                <Route path=\"/oop\" render={()=><OOP/>} />\n                <Route path=\"/func\" render={()=><Functional/>} />\n            </div>\n        </Switch>\n    </Router>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}