{"version":3,"sources":["helpers/arrayCreator.js","store/trades/actions.js","store/trades/actionTypes.js","components/gameObjects/cells/cell.js","store/gameObjects/actions.js","store/gameObjects/actionTypes.js","components/gameFoos/field/field.js","components/gameObjects/goldMine/goldMine.js","components/gameFoos/infoList/infoList.js","drugInheritance/drugger/index.js","store/generators/actions.js","store/generators/actionTypes.js","components/gameObjects/animals/chickens/chickens.js","store/dragged/actions.js","store/dragged/actionTypes.js","components/gameObjects/animals/cows/cows.js","components/gameObjects/rye/rye.js","components/gameFoos/trades/trades.js","components/gameFoos/curs/curs.js","components/gameFoos/market/market.js","components/hocs/main.js","App.js","serviceWorker.js","store/initialState.js","store/dragged/reducer.js","store/generators/reducer.js","store/gameObjects/reducer.js","store/trades/reducer.js","index.js","store/index.js","store/reducers.js"],"names":["arrayCreator","lenght","arr","i","push","incrementmoney","sum","type","payload","discrementmoney","Cell","props","onDragOverHandler","e","preventDefault","deleteDrager","removeDrag","state","mountedId","setState","droped","buttonSatus","cellClass","onDropHandler","setCurrentId","setCell","id","dataTransfer","getData","ref","current","sold","getProfit","removeCell","cellToRemoveOn","ind","React","createRef","tradeButton","this","Button","onClick","className","onDrop","onDragOver","Component","actionCreators","drugId","cell","idToRemove","trades","cellToRemoveInd","cellToRemove","connect","chickCount","dragged","chickens","ryeCount","rye","FarmField","buyCell","cash","newkye","uniqid","addCell","spend","cells","key","noCellsToAdd","cellCount","map","el","filter","cellToRemoveOff","cellToAdd","gameObjects","money","GoldMine","declarate","timeSeconds","Date","getSeconds","timeMinutes","getMinutes","seconds","prevTimeSeconds","minutes","prevTimeMinutes","toFixed","profitPerTime","best","max","datClass","infoList","names","infoArray","nameOfClass","cowCount","cow","food","generators","eggs","milk","Drugger","removeController","removeControllerInterval","setInterval","container","homeContainer","product","status","clearInterval","interval","sellPrice","removeMethod","deal","cost","onStart","setData","name","onDragEndHandler","method","generator","harvest","harvester","document","createElement","querySelector","appendChild","tosee","dealOpportunity","classNames","value","elemento","draggable","onDragStart","onDragEnd","controlElements","ReactDom","createPortal","feed","Chicken","console","log","takeAfood","commonFood","alert","addChick","removeChick","count","Cow","addCow","removeCow","newCount","cows","Rye","addRye","removeRye","Trades","soldEggs","resetEggs","sell","soldMilk","resetMilk","Curs","Market","ryes","MainHoc","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","position","resurses","mapReducer","action","newValueChic","incrementChick","newValueCow","incrementCow","newValueRye","incrementRye","newValueChic2","incrementChick2","newValueCow2","incrementCow2","newValueRye2","incrementRye2","incrementHarvest","dincrementHarvest","putEgg","incremenEgg","incrementMilk","nullEgg","nullMilk","money2","store","createStore","combineReducers","subscribe","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9a7cf97.chunk.js","sourcesContent":["\n\nconst arrayCreator =(lenght)=>{\n    const arr =[]\n    for(let i=0;i<lenght;i++){\n        arr.push(i)\n    }\n\n    return arr\n}\n\n\nexport default arrayCreator;","import * as types from './actionTypes'\n\nexport const incrementmoney = (sum) =>{\n    return {\n        type: types.incrementmoney,\n        payload:{\n            sum\n        }\n    }\n}\n\nexport const discrementmoney = (sum) =>{\n    return {\n        type: types.discrementmoney,\n        payload: {\n            sum\n        }\n    }\n}\n\n","const incrementmoney = 'trades.incrementmoney'\nconst discrementmoney = 'trades.discrementmoney'\nexport {\n    incrementmoney,\n    discrementmoney,\n}","import React from 'react'\nimport { connect } from 'react-redux';\nimport * as actionGameObjects from '../../../store/gameObjects/actions';\nimport * as trades from '../../../store/trades/actions';\nimport { Button } from 'reactstrap';\nimport './cells.scss';\n\n\n\nclass Cell extends React.Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            droped:false,\n            mountedId:null,\n            buttonSatus: 'hidden',\n            cellClass:'cell empty'\n        }\n        \n        this.ref = React.createRef()\n    }\n\n\n    onDragOverHandler =(e)=>{\n        e.preventDefault();\n    }\n\n    deleteDrager =() =>{\n        const  {removeDrag} = this.props\n        removeDrag(this.state.mountedId)\n        this.setState({droped:false, buttonSatus:'hidden', cellClass:'cell empty'})\n    }\n\n    onDropHandler = (e)=>{\n        const  {setCurrentId, setCell} = this.props\n\n       const id =  e.dataTransfer\n        .getData('id');\n\n        const cellClass =  e.dataTransfer\n        .getData('content');\n       \n\n        if (!this.state.droped){\n            this.setState({mountedId:id, droped:true,buttonSatus:'shown', cellClass: `cell ${cellClass}`})\n            setCurrentId(id)\n            setCell(this.ref.current)\n        }\n    }\n\n    sold = () =>{\n        const {getProfit, removeCell, cellToRemoveOn} = this.props\n        getProfit(500);\n        removeCell(this.props.ind);\n        cellToRemoveOn();\n        \n\n\n    }\n \n\n    render(){\n            const tradeButton = this.state.droped ? null : <Button onClick = {this.sold}>Продать землю</Button>\n            return <div className= {this.state.cellClass} onDrop = {this.onDropHandler} onDragOver = {this.onDragOverHandler} ref ={this.ref}>\n                <Button onClick={this.deleteDrager} className={this.state.buttonSatus}>Очистить, впизду</Button>  \n                {tradeButton } \n            </div>\n    }\n}\n\nconst mapStateToProps = state => {\n    const props = {\n      chickCount: state.dragged.chickens,\n      ryeCount: state.dragged.rye,\n    };\n    return props;\n  };\n  \n  const actionCreators = {\n    setCurrentId: actionGameObjects.setCurrentId,\n    setCell: actionGameObjects.setCell,\n    removeDrag: actionGameObjects.removeDrag,\n    getProfit: trades.incrementmoney,\n    removeCell: actionGameObjects.removeCell,\n    cellToRemoveOn: actionGameObjects.cellToRemoveOn\n  };\n  \n  export default connect(mapStateToProps, actionCreators)(Cell);\n\n","import * as types from './actionTypes';\n\n  \nexport const setCurrentId = drugId => {\n    return {\n      type: types.setCurrentId,\n      payload: {\n        drugId\n      },\n    };\n  };\n\n  export const removeDrag = idToRemove => {\n    return {\n      type: types.removeDrag,\n      payload: {\n        idToRemove\n      },\n    };\n  };\n\n  export const setCell = cell => {\n\n    return {\n      type: types.setCell,\n      payload:{\n        cell\n      }\n    };\n  };\n\n  export const addCell = () => {\n    return {\n      type: types.addCell,\n      payload: {\n        cellToAdd: true\n      },\n    };\n  };\n\n  export const noCellsToAdd = () => {\n    return {\n      type: types.noCellsToAdd,\n      payload: {\n        cellToAdd: false\n      },\n    };\n  };\n\n  export const removeCell = (ind) => {\n    return {\n      type: types.removeCell,\n      payload: {\n        cellToRemoveInd: ind\n      },\n    };\n  };\n\n  export const cellToRemoveOn = () => {\n    return {\n      type: types.removeDrag,\n      payload: {\n        cellToRemove: true\n      },\n    };\n  };\n\n  export const cellToRemoveOff = () => {\n    return {\n      type: types.removeDrag,\n      payload: {\n        cellToRemove: false,\n        cellToRemoveInd: null\n      },\n    };\n  };","const setCurrentId = 'gameobjects.setCurrentId';\nconst removeDrag = 'gameobjects.removeDrag';\nconst setCell = 'gameobjects.setCell';\nconst addCell = 'gameobjects.addCell';\nconst removeCell = 'gameobjects.removeCell';\nconst cellToRemoveOn ='gameobjects.cellToRemoveOn'\nconst cellToRemoveOff ='gameobjects.cellToRemoveOff'\nconst noCellsToAdd ='gameobjects.noCellsToAdd'\n\nexport {\n    setCurrentId,\n    removeDrag,\n    setCell,\n    addCell,\n    removeCell,\n    cellToRemoveOn,\n    cellToRemoveOff,\n    noCellsToAdd,\n   \n};","import React from 'react'\nimport arrayCreator from '../../../helpers/arrayCreator.js'\nimport Cell from '../../gameObjects/cells/cell.js'\nimport './field.scss'\nimport { Button } from 'reactstrap';\nimport {connect} from 'react-redux'\nimport * as actionGameObjects from '../../../store/gameObjects/actions';\nimport * as trades from '../../../store/trades/actions';\nimport uniqid from 'uniqid'\n\n\nclass FarmField extends React.Component{\n    constructor(props){\n        super(props);\n        this.cells = arrayCreator(this.props.cellCount).map((el,ind)=><Cell key={ind} ind={ind}></Cell>)\n    }\n\n    buyCell = () =>{\n        if(this.props.cash > 999)\n       { let newkye= uniqid()\n        const {addCell, spend} = this.props\n        spend(1000);\n        this.cells = [...this.cells,  <Cell key={newkye} ind={newkye}></Cell>]\n        addCell()\n        this.props.noCellsToAdd();}\n    }\n\n    render(){\n        \n       if(this.props.cellToRemove) \n         {\n            this.cells = this.cells.filter((cell)=> cell.props.ind !== this.props.cellToRemoveInd)\n        }   \n        this.props.cellToRemoveOff()\n        return <div className='field'>{this.cells}\n            <Button onClick ={this.buyCell} className = \"buyLand\">А не прикупить ли мне земли?</Button>\n        </div>\n    }\n}\n\nconst mapStateToProps =state =>{\n    const props ={\n       cellCount: state.gameObjects.cellCount,\n       cellToRemove: state.gameObjects.cellToRemove,\n       cellToRemoveInd: state.gameObjects.cellToRemoveInd,\n       cellToAdd: state.gameObjects.cellToAdd,\n       cash: state.trades.money\n   }\n   return props\n}\n\n\nconst actionCreators = {\n    addCell: actionGameObjects.addCell,\n    spend: trades.discrementmoney,\n    cellToRemoveOff: actionGameObjects.cellToRemoveOff,\n    noCellsToAdd: actionGameObjects.noCellsToAdd\n  };\n\nexport default connect(mapStateToProps, actionCreators)(FarmField)","import React from 'react'\nimport {connect} from 'react-redux'\nimport { Button } from 'reactstrap';\nimport * as trades from '../../../store/trades/actions';\nimport './goldMine.scss' \n\n\n\nclass GoldMine extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.timeSeconds = null;\n        this.timeMinutes = null;\n        this.prevTimeSeconds = new Date().getSeconds()\n        this.prevTimeMinutes = new Date().getMinutes()\n        this.best = 0;\n        this.max = this.props.money\n        this.state ={\n            profitPerTime:0,\n            money:1200,\n            best:0\n        }\n    }\n\n    // componentDidMount (){\n    //     setInterval(\n    //         ()=>{\n    //             if(this.state.max < this.props.money)\n    //             {let max = this.props.money;\n    //             this.setState({max})}},\n    //         1000)\n\n    //     setInterval(\n    //          ()=>{\n    //             this.tenSecondsProfit = this.props.money - this.privTSP \n    //             this.privTSP = this.tenSecondsProfit\n    //             if(this.tenSecondsProfit > this.state.maxPerTenMinutes){\n    //                 this.setState({maxPerTenMinutes:this.tenSecondsProfit})\n    //             }\n    //         },\n    //          10000)   \n    // }\n\n\n\n    declarate =() =>{\n        const {spend} = this.props;\n        spend(this.props.money * 0.12)\n        this.timeSeconds = new Date().getSeconds()\n        this.timeMinutes = new Date().getMinutes()\n        const seconds = (this.timeSeconds - this.prevTimeSeconds) / 60;\n        const minutes = (this.timeMinutes - this.prevTimeMinutes + seconds).toFixed(2)\n        this.setState({profitPerTime:(this.props.money - this.state.money) / minutes})\n        this.setState({money: this.props.money})\n        this.prevTimeSeconds = this.timeSeconds\n        this.prevTimeMinutes = this.timeMinutes\n    }\n\n\n    render(){\n        this.best = this.best > this.state.profitPerTime ? this.best : this.state.profitPerTime.toFixed(2)\n        this.max = this.max > this.props.money ? this.max : this.props.money\n        let datClass = this.props.money > 0 ? 'green val' : 'red val'\n        return <div className = \"value\">\n            Голда: <span className = {datClass}>{this.props.money}</span>\n            <div className ='statistic'>\n                <div className = 'max'>Максимальный баланс: {this.max}</div>\n                <div className = 'profit'>Заработано\\мин: {this.state.profitPerTime.toFixed(2)}</div>\n                <div className = 'best'>лучший показатель: {this.best}</div>\n                <Button className ='btnDeclr' onClick={this.declarate}>Декларировать</Button>\n            </div>\n        </div>\n    }\n\n}\n\nconst mapStateToProps =state =>{\n     const props ={\n        money: state.trades.money\n    }\n    return props\n}\n\nconst actionCreators = {\n    spend: trades.discrementmoney,\n  };\n\nexport default connect(mapStateToProps, actionCreators)(GoldMine)","import React from 'react'\nimport { connect } from 'react-redux';\nimport './info.scss'; \nimport GoldMine from '../../gameObjects/goldMine/goldMine.js'\n\n\nclass infoList extends React.Component{\n    constructor(props){\n        super(props);\n        this.state ={}\n    }\n\n  \n \n    render(){\n        let i = 0;\n        const names = ['Мухрю','Чикены','Рош','Еда', 'Всего ик', 'Надой']\n        let infoArray =[];\n        for (let key in this.props){\n            if(key !== 'dispatch')\n            {\n                const nameOfClass = this.props[key] > 0 ? 'val green' : 'val red'\n                infoArray.push(<div className='value' key ={i}>{names[i]}: <span className={nameOfClass}>{this.props[key]}</span></div>)\n                i++;\n            }\n        }\n        infoArray = [...infoArray, <GoldMine key =\"goldmine\"></GoldMine>]\n    \n        return <div className = 'infolist'>\n                    {infoArray}\n                </div>\n    }\n}\n\nconst mapStateToProps = state => {\n    const props = {\n      cowCount: state.dragged.cow,  \n      chickCount: state.dragged.chickens,\n      ryeCount: state.dragged.rye,\n      food: state.generators.food,\n      eggs: state.generators.eggs,\n      milk: state.generators.milk,\n    };\n    return props;\n  };\n\n\n  \n  export default connect(mapStateToProps)(infoList);","import React from 'react'\nimport uniqid from 'uniqid'\nimport ReactDom from 'react-dom'\nimport './common.scss' \n\n\nclass Drugger extends React.Component{\n    constructor(props){\n        super(props)\n        this.homeContainer = document.createElement('div')\n        document.querySelector('body').appendChild(this.homeContainer)\n        this.container = this.homeContainer\n        this.id = uniqid()\n        this.method = null;\n        this.removeMethod = null;\n        this.state ={dragged:false}\n    }\n\n    removeController =()=>{\n        const {getProfit} = this.props\n        this.removeControllerInterval = setInterval(()=>{\n            if(this.props.idToRemove===this.id){\n                this.id= uniqid()\n                this.container=this.homeContainer\n                this.setState({dragged:false, product:0, status:this.status})\n                clearInterval(this.interval, this.removeControllerInterval)\n                getProfit(this.sellPrice)\n                this.removeMethod()\n                \n            }\n        })\n    }\n\n    \n\n    \n\n    deal = () => {\n      const {spend} = this.props\n        spend(this.cost);\n    }\n\n\n    onStart= (e)=>{\n        e.dataTransfer\n        .setData('id', this.id)\n        e.dataTransfer\n        .setData('content', `${this.props.name}_inside`);\n    }\n\n    onDragEndHandler = () => {\n        if(this.props.id === this.id && !this.state.dragged){\n            this.deal()\n            this.setState({dragged:true, status:`dragged dragged_${this.props.name}`})\n            this.container = this.props.cell\n            this.removeController()\n            this.method()\n            this.generator()\n                   \n        }\n    }\n\n    harvest=()=>{\n        this.props.harvester(this.state.product)\n        this.setState({product:0})\n    }\n\n    render(){ \n        \n       const tosee = this.dealOpportunity()? 'visible' : 'none'\n       const classNames = `${this.props.name} ${this.state.status} household ${tosee}`\n       const product = this.state.dragged ? this.props.product : ''  \n       const value = this.state.dragged ? this.state.product : ''    \n\n       const elemento = <div className ={classNames}\n            draggable={!this.state.dragged} \n            onDragStart={this.onStart} \n            onDragEnd={this.onDragEndHandler} \n        >\n\n        <div>{product} {this.state.controlElements}{value}</div>\n        </div>\n\n        \n        return ReactDom.createPortal(elemento, this.container)\n    }\n\n}\n\nexport default Drugger\n\n\n","import * as types from './actionTypes';\n\n\n\nexport const harvester = (count) => {\n    return {\n      type: types.harvester,\n      payload: {\n        count\n      },\n    };\n  };\n\n  export const feed = () => {\n    return {\n      type: types.feed\n    };\n  };\n\n\n\n  export const putEggs = (count) => {\n    return {\n      type: types.putEggs,\n      payload: {\n        count\n      },\n    };\n  };\n\n  export const milkCow = (count) => {\n    return {\n      type: types.milkCow,\n      payload: {\n        count\n      },\n    };\n  };\n\n  export const resetEggs = () => {\n    return {\n      type: types.resetEggs\n    };\n  };\n\n  export const resetMilk = () => {\n    return {\n      type: types.resetMilk\n    };\n  };\n\n","const harvester = 'generators.harvester';\nconst feed = 'generators.feed';\nconst putEggs = 'generators.putEggs';\nconst milkCow = 'generators.milkCow';\nconst resetEggs = 'generators.resetEggs'\nconst resetMilk = 'generators.resetMilk'\n\nexport {\n    harvester,\n    feed,\n    putEggs,\n    milkCow,\n    resetEggs,\n    resetMilk\n};","import React from 'react'\nimport Drugger from '../../../../drugInheritance/drugger/index.js'\nimport { Button } from 'reactstrap';\nimport './chickens.scss' \nimport { connect } from 'react-redux';\nimport * as draggedActions from '../../../../store/dragged/actions';\nimport * as generators from '../../../../store/generators/actions';\nimport * as trades from '../../../../store/trades/actions';\n\nclass Chicken extends Drugger{\n    constructor(props){\n        super(props)\n        this.method = this.props.addChick\n        this.removeMethod = this.props.removeChick\n        this.status  = `wait_for_drag wait_for_drag-${this.props.name}`\n        this.state ={\n        controlElements:[<Button key = {this.props.ind} className=\"btn-info feed\" onClick={this.feed}>Покормиц</Button>\n                        ,<Button key = {this.props.ind + 'i'} className=\"btn-info harvest\" onClick={this.harvest}>Собрать</Button>],\n        status: this.status,\n        product:0,\n        food:0\n       } \n       this.cost = 90;\n       this.sellPrice = 40;\n    }\n\n    dealOpportunity = () => this.props.money < this.cost ? false : true \n\n    generator = () =>{\n    \n      this.interval = setInterval(()=>{\n      if(this.state.food > 0){\n      console.log('state', this.props.state)\n      this.setState((state) => {\n        return {food: state.food -1, product:state.product + 1}\n      });    \n    }\n  },10000)\n }\n\n\n\n takeAfood = () => {\n  this.props.feed()\n  this.setState((state) => {\n    return {food: state.food + 1 * 3}\n  });\n }\n\n    feed =  () =>{\n      this.props.commonFood > 0 ? this.takeAfood() : alert('not enought food')\n   }\n}\n\n\n\n\nconst mapStateToProps = state => {\n    const props = {\n      id: state.gameObjects.drugId,\n      cell: state.gameObjects.cell,\n      idToRemove: state.gameObjects.idToRemove,\n      commonFood: state.generators.food,\n      money: state.trades.money\n    };\n    return props;\n  };\n\n  const actionCreators = {\n    addChick: draggedActions.addChick,\n    removeChick: draggedActions.removeChick,\n    feed: generators.feed,\n    harvester: generators.putEggs,\n    spend: trades.discrementmoney,\n    getProfit: trades.incrementmoney,\n  };\n  \n  export default connect(mapStateToProps, actionCreators)(Chicken);","import * as types from './actionTypes';\n\nexport const addChick = ()=> {\n    return {\n      type: types.addChicken\n    };\n  };\n\n  export const addRye = () => {\n    return {\n      type: types.addRye\n    };\n  };\n\n  \nexport const addCow = newCount => {\n    return {\n      type: types.addCow,\n      payload: {\n        cows: newCount,\n      },\n    };\n  };\n\n  export const removeChick = ()=> {\n    return {\n      type: types.removeChicken\n    };\n  };\n\n  export const removeRye = () => {\n    return {\n      type: types.removeRye\n    };\n  };\n\n  \nexport const removeCow = newCount => {\n    return {\n      type: types.removeCow,\n    };\n  };","const addChicken = 'dragged.addChicken';\nconst addCow = 'dragged.addCow';\nconst addRye = 'dragged.addRye';\nconst removeChicken = 'dragged.removeChicken';\nconst removeCow = 'dragged.removeCow';\nconst removeRye = 'dragged.removeRye';\n\n\nexport {\n    addChicken,\n    addCow,\n    addRye,\n    removeChicken,\n    removeCow,\n    removeRye\n};","import React from 'react'\nimport Drugger from '../../../../drugInheritance/drugger/index.js'\nimport { Button } from 'reactstrap';\nimport './cows.scss' \nimport { connect } from 'react-redux';\nimport * as draggedActions from '../../../../store/dragged/actions';\nimport * as generators from '../../../../store/generators/actions';\nimport * as trades from '../../../../store/trades/actions';\n\nclass Cow extends Drugger{\n    constructor(props){\n        super(props)\n        this.method = this.props.addCow\n        this.removeMethod = this.props.removeCow\n        this.status  = `wait_for_drag wait_for_drag-${this.props.name}`\n        this.state ={\n        controlElements:[<Button key = {this.props.ind} className=\"btn-info feed\" onClick={this.feed}>Покормиц</Button>,\n                         <Button key = {this.props.ind + 'i'} className=\"btn-info harvest\" onClick={this.harvest}>Собрать</Button>],\n        status: this.status,\n        product:0,\n        food:0\n       } \n       this.cost = 300;\n       this.sellPrice = 100;\n    }\n\n    dealOpportunity = () => this.props.money < this.cost ? false : true\n\n    generator = () =>{\n    \n      this.interval = setInterval(()=>{\n      if(this.state.food > 0){\n\n      this.setState((state) => {\n        return {food: state.food -1, product:state.product + 1}\n      });    \n    }\n    console.log(this.state.food)\n  },20000)\n }\n\n\n takeAfood = () => {\n  this.props.feed()\n  this.setState((state) => {\n    return {food: state.food + 1 }\n  });\n }\n\n    feed =  () =>{\n      this.props.commonFood > 0 ? this.takeAfood() : alert('not enought food')\n   }\n}\n\n\n\n\nconst mapStateToProps = state => {\n    const props = {\n      id: state.gameObjects.drugId,\n      cell: state.gameObjects.cell,\n      idToRemove: state.gameObjects.idToRemove,\n      commonFood: state.generators.food,\n      money: state.trades.money\n    };\n    return props;\n  };\n\n  const actionCreators = {\n    addCow: draggedActions.addCow,\n    removeCow: draggedActions.removeCow,\n    feed: generators.feed,\n    harvester: generators.milkCow,\n    spend: trades.discrementmoney,\n    getProfit: trades.incrementmoney\n  };\n  \n  export default connect(mapStateToProps, actionCreators)(Cow);","import React from 'react'\nimport Drugger from '../../../drugInheritance/drugger/index.js'\nimport { Button } from 'reactstrap';\nimport './rye.scss' \nimport { connect } from 'react-redux';\nimport * as draggedActions from '../../../store/dragged/actions';\nimport * as generators from '../../../store/generators/actions';\nimport * as trades from '../../../store/trades/actions';\n\nclass Rye extends Drugger{\n    constructor(props){\n        super(props)\n        this.method = this.props.addRye\n        this.removeMethod = this.props.removeRye\n        this.status = `wait_for_drag-${this.props.name} `\n        this.state ={\n          controlElements:[<Button key = {this.props.ind} className=\"btn-info\" onClick={this.harvest}>Пожать</Button>],\n          status: this.status,\n          product:0\n         } \n         this.cost = 400\n         this.sellPrice = 0\n    }\n\n    dealOpportunity = () => this.props.money < this.cost ? false : true\n\n     generator = () =>{\n        this.interval = setInterval(()=>{\n        if(this.state.product===0){\n        this.setState({product:1})\n      }\n    },10000)\n  }\n\n\n\n }\n\n\n\nconst mapStateToProps = state => {\n    const props = {\n      id: state.gameObjects.drugId,\n      cell: state.gameObjects.cell,\n      idToRemove: state.gameObjects.idToRemove,\n      money: state.trades.money\n    };\n    return props;\n  };\n\n\n\n  const actionCreators = {\n    addRye: draggedActions.addRye,\n    removeRye: draggedActions.removeRye,\n    harvester: generators.harvester,\n    spend: trades.discrementmoney,\n    getProfit: trades.incrementmoney,\n  };\n  \n  export default connect(mapStateToProps, actionCreators)(Rye);","import React from 'react'\nimport { connect } from 'react-redux'\nimport * as generators from '../../../store/generators/actions';\nimport * as trades from '../../../store/trades/actions';\nimport { Button } from 'reactstrap';\nimport './trades.scss'\n\nclass Trades extends React.Component{\n    constructor(props){\n        super(props)\n\n    }\n\n    soldEggs =() =>{\n        const {resetEggs, sell} = this.props\n        resetEggs();\n        sell(6 * this.props.eggs)\n    }\n    soldMilk =() =>{\n        const {resetMilk, sell} = this.props\n        sell(15 * this.props.milk)\n        resetMilk();\n    }\n\n    render (){\n        return <div className=\"sellBtn_wrapper\">\n            <Button className ='sellBtn btnEggs' onClick={this.soldEggs}>Продать ики </Button>\n            <Button className ='sellBtn btnMilk' onClick={this.soldMilk}>Продать молоко</Button>\n        </div>\n    }\n}\n\nconst mapStateToProps = state => {\n    const props = {\n        money: state.trades.money,\n        eggs: state.generators.eggs,\n        milk: state.generators.milk,\n    };\n    return props;\n  };\n  \n  const actionCreators = {\n    resetEggs: generators.resetEggs,\n    resetMilk: generators.resetMilk,\n    sell: trades.incrementmoney\n  };\n\nexport default connect(mapStateToProps, actionCreators)(Trades);","import React from 'react';\nimport './curs.scss'\n\nconst Curs = ()=> \n    \n    <div className = 'curs'>\n        <div>Курс на сегодня:</div>\n        <div>Ико купить:10 ед\\ продать: 6 ед</div>\n        <div>Молоко купить:20 ед\\ продать: 15 ед</div>\n        <div>Курочки купить:90 ед\\ продать: 40 ед</div>\n        <div>Коровка купить: 300 ед\\ продать: 100 ед</div>\n        <div>Земля купить: 1000 ед\\ продать 500 ед</div>\n        <div>Рош купить:400 ед</div>\n    </div>\n\nexport default Curs","import React from 'react'\nimport Chicken from '../../gameObjects/animals/chickens/chickens.js';\nimport Cow from '../../gameObjects/animals/cows/cows.js';\nimport Rye from '../../gameObjects/rye/rye.js'\nimport arrayCreator from '../../../helpers/arrayCreator.js'\nimport Trades from '../trades/trades.js'\nimport Curs from '../curs/curs.js'\n\nclass Market extends React.Component{\n\n    constructor(props){\n        super(props)\n        \n    }\n\n\n    render(){\n\n        const chickens = arrayCreator(64).map((el,ind)=><Chicken key={ind} \n\n            ind = {ind}\n            name='chicken' \n            product = 'Ики'\n            >\n            </Chicken>)\n\n\n            const ryes = arrayCreator(64).map((el,ind)=><Rye key={ind}\n            ind = {ind}\n            name='rye' \n            product = 'Пишша'\n            >\n            </Rye>)\n\n            const cows = arrayCreator(64).map((el,ind)=><Cow key={ind}\n            ind = {ind}\n            name='cow' \n            product = 'Милк'\n             >\n            </Cow>)\n\n        return <div>\n                    {chickens}\n                    {ryes}\n                    {cows}\n                    <Curs></Curs>\n                    <Trades></Trades>\n        </div>\n    }\n}\n\n\n\nexport default Market","import React from 'react';\nimport FarmField from '../gameFoos/field/field.js';\nimport InfoList from '../gameFoos/infoList/infoList.js';\nimport Market from '../gameFoos/market/market.js';\n\n\n\n\nconst MainHoc = ()=> \n    \n    <div>\n        <FarmField></FarmField>\n        <InfoList></InfoList>\n        <Market></Market>\n    </div>\n\nexport default MainHoc","import React from 'react';\nimport './App.css';\nimport MainHoc from './components/hocs/main.js'\n\n\nfunction App() {\n  return (\n   <MainHoc></MainHoc>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst initialState = {\n    gameObjects:\n    {cellCount: 9,\n     cellToRemove:false,\n     cellToAdd: false,\n     cellToRemoveInd: null,\n     drugId:null,\n     cell:null,   \n     position:null},\n\n    resurses:\n   {money:1200},\n\n    dragged:\n   {chickens:0,\n    rye:0,\n    cow:0},\n\n    generators:\n    {eggs:0,\n    milk:0,\n    food:0,}\n}    \n\nexport default initialState","import initialState from '../initialState'\nimport * as types from './actionTypes'\n\nconst mapReducer  = (state = initialState.dragged, action) =>{\n    switch(action.type){\n        case types.addChicken:\n            let newValueChic = state.chickens\n            newValueChic++\n            const incrementChick = {chickens:newValueChic}\n            return { ...state, ...incrementChick }    \n\n        case types.addCow:\n            let newValueCow = state.cow\n            newValueCow++\n            const incrementCow = {cow:newValueCow}\n            return { ...state, ...incrementCow }   \n            \n        case types.addRye:\n            let newValueRye = state.rye\n            newValueRye++\n            const incrementRye = {rye:newValueRye}\n            return { ...state, ...incrementRye } \n\n\n        case types.removeChicken:\n            let newValueChic2 = state.chickens\n            newValueChic2--\n            const incrementChick2 = {chickens:newValueChic2}\n            return { ...state, ...incrementChick2 }    \n    \n        case types.removeCow:\n            let newValueCow2 = state.cow\n            newValueCow2--\n            const incrementCow2 = {cow:newValueCow2}\n            return { ...state, ...incrementCow2 }   \n                \n         case types.removeRye:\n            let newValueRye2 = state.rye\n            newValueRye2--\n            const incrementRye2 = {rye:newValueRye2}\n            return { ...state, ...incrementRye2 } \n \n        default:\n            return state\n    }\n}\n\nexport default mapReducer;","import initialState from '../initialState'\nimport * as types from './actionTypes'\n\n\nconst mapReducer  = (state = initialState.generators, action) =>{\n    switch(action.type){\n        case types.harvester:\n            let harvest = state.food\n            harvest = harvest + action.payload.count\n            const incrementHarvest = {food:harvest}\n            return { ...state, ...incrementHarvest }    \n\n        case types.feed:\n            let food = state.food\n            food--\n            const dincrementHarvest = {food}\n            return { ...state, ...dincrementHarvest } \n\n        case types.putEggs:\n            let putEgg = state.eggs\n            putEgg = putEgg + action.payload.count\n            const incremenEgg= {eggs:putEgg}\n            return { ...state, ...incremenEgg } \n\n        case types.milkCow:\n            let milk = state.milk\n            milk = milk + action.payload.count\n            const incrementMilk = {milk}\n            return { ...state, ...incrementMilk } \n\n         case types.resetEggs:\n            const nullEgg= {eggs:0}\n            return { ...state, ...nullEgg } \n    \n        case types.resetMilk:\n            const nullMilk = {milk:0}\n            return { ...state, ...nullMilk } \n\n        default:\n            return state\n    }\n}\n\nexport default mapReducer;","import initialState from '../initialState'\nimport * as types from './actionTypes'\n\n\nconst mapReducer  = (state = initialState.gameObjects, action) =>{\n    \n    switch(action.type){\n \n        case types.setCurrentId:\n            return { ...state, ...action.payload }\n\n        case types.removeDrag:\n            return { ...state, ...action.payload }    \n\n        case types.setCell:\n                return { ...state, ...action.payload } \n\n        case types.addCell:\n                return { ...state, ...action.payload } \n                \n        case types.removeCell:\n                return { ...state, ...action.payload }    \n\n        case types.cellToRemoveOn:\n                return { ...state, ...action.payload }  \n                \n        case types.cellToRemoveOff:\n                return { ...state, ...action.payload } \n        \n        case types.noCellsToAdd:\n                return { ...state, ...action.payload } \n                       \n            \n        default:\n            return state\n    }\n}\n\nexport default mapReducer;","import initialState from '../initialState'\nimport * as types from './actionTypes'\n\n\nconst mapReducer  = (state = initialState.resurses, action) =>{\n    switch(action.type){\n    \n        case types.incrementmoney:\n            let money = state.money\n            money = money + action.payload.sum\n            const incrementmoney = {money}\n            return {state, ...incrementmoney}\n\n        case types.discrementmoney:\n            let money2 = state.money\n            money2 = money2 - action.payload.sum\n            const discrementmoney = {money:money2}\n            return {state, ...discrementmoney}    \n            \n\n        default:\n            return state\n    }\n}\n\nexport default mapReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport initStore from './store';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst store = initStore();\nstore.subscribe(()=>console.log('change'))\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.register();\n","import {createStore} from 'redux'\nimport createReducer from './reducers'\n\nexport default () => createStore(createReducer());","import {combineReducers} from 'redux'\nimport dragged from './dragged/reducer'\nimport generators from './generators/reducer'\nimport gameObjects from './gameObjects/reducer'\nimport trades from './trades/reducer'\n\nexport default () =>\n  combineReducers({\n    dragged,\n    generators,\n    gameObjects,\n    trades\n  });\n\n\n"],"sourceRoot":""}